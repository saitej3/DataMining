import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.*;

class Tuple {
	  Set<Integer> itemset;
	  int support;
	  
	  Tuple() {
	    itemset = new HashSet<>();
	    support = -1;
	  }
	  
	  Tuple(Set<Integer> s) {
	    itemset = s;
	    support = -1;
	  }
	  
	  Tuple(Set<Integer> s, int i) {
	    itemset = s;
	    support = i;
	  }
	}


public class Apriori {
	
	
	  static Set<Tuple> c;
	  static Set<Tuple> l;
	  static int d[][];
	  static int min_support;

	public static void main(String args[]) throws Exception
	{
		    createData();
		    getData();
		    c = new HashSet<>();
		    l = new HashSet<>();
		    Scanner scan = new Scanner(System.in);
		    int i, j, m, n;
		    System.out.println("Enter the minimum support:");
		    min_support = scan.nextInt();
		    Set<Integer> candidate_set = new HashSet<>();
		    
		    for(i=0 ; i < d.length ; i++) 
		      for(j=0 ; j < d[i].length ; j++) 
		        candidate_set.add(d[i][j]);
		      
		    
		   
		    Iterator<Integer> iterator = candidate_set.iterator();
		    while(iterator.hasNext()) {
		      Set<Integer> s = new HashSet<>();
		      s.add(iterator.next());
		      Tuple t = new Tuple(s, count(s));
		      c.add(t);
		    }
		    
		    prune();
		    generateFrequentItemsets();
	        
	}
	
	static int count(Set<Integer> s) {


	    int i, j, k;
	    int support = 0;
	    int count;
	    boolean containsElement;
	    
	    for(i=0 ; i < d.length ; i++)
	    {
	      count = 0;
	      Iterator<Integer> iterator = s.iterator();
	      while(iterator.hasNext()) {
	        int element = iterator.next();
	        containsElement = false;
	        for(k=0 ; k < d[i].length ; k++) {
	          if(element == d[i][k]) {
	            containsElement = true;
	            count++;
	            break;
	          }
	        }
	        
	        if(!containsElement) 
	          break;
	        
	      }
	      if(count == s.size()) 
	        support++;
	      
	    }
	    return support;
	  }
	  
	  //function 2
	  static void prune() 
	  
	  {
		  System.out.println("--------------pruning Step------------");
		  for(Tuple t : c) 
		      System.out.println(t.itemset + " : " + t.support);
		    
	    l.clear();
	    Iterator<Tuple> iterator = c.iterator();
	    while(iterator.hasNext()) {
	      Tuple t = iterator.next();
	      if(t.support >= min_support) {
	        l.add(t);
	      }
	    }
	    
	    System.out.println("-+------- Result--------- -+-");
	    for(Tuple t : l) 
	      System.out.println(t.itemset + " : " + t.support);
	    
	  }
	  

	  //function 2
	  static void generateFrequentItemsets() 
	  {
	    boolean toBeContinued = true;
	    int element = 0;
	    int size = 1;
	    Set<Set> candidate_set = new HashSet<>();
	    
	    while(toBeContinued)
	    {
	      candidate_set.clear();
	      c.clear();
	      Iterator<Tuple> iterator = l.iterator();
	      while(iterator.hasNext()) {
	        Tuple t1 = iterator.next();
	        Set<Integer> temp = t1.itemset;
	        Iterator<Tuple> it2 = l.iterator();
	        while(it2.hasNext()) {
	          Tuple t2 = it2.next();
	          Iterator<Integer> it3 = t2.itemset.iterator();
	          while(it3.hasNext()) {
	            try {
	              element = it3.next();
	            } catch(ConcurrentModificationException e) {
	              // Sometimes this Exception gets thrown, so simply break in that case.
	              break;
	            }
	            temp.add(element);
	            if(temp.size() != size) {
	              Integer[] int_arr = temp.toArray(new Integer[0]);
	              Set<Integer> temp2 = new HashSet<>();
	              for(Integer x : int_arr) {
	                temp2.add(x);
	              }
	              candidate_set.add(temp2);
	              temp.remove(element);
	            }
	          }
	        }
	      }
	      Iterator<Set> candidate_set_iterator = candidate_set.iterator();
	      while(candidate_set_iterator.hasNext()) {
	        Set s = candidate_set_iterator.next();
	        // These lines cause warnings, as the candidate_set Set stores a raw set.
	        c.add(new Tuple(s, count(s)));
	      }
	      prune();
	      if(l.size() <= 1) {
	        toBeContinued = false;
	      }
	      size++;
	    }
	    System.out.println("\n=+= FINAL LIST =+=");
	    for(Tuple t : l) {
	      System.out.println(t.itemset + " : " + t.support);
	    }
	  }
	
	static void createData() throws Exception
	{
		File f=new File("data1.txt");
        FileWriter fw=new FileWriter(f);
        BufferedWriter b=new BufferedWriter(fw);
        
        for(int i=0;i<10;i++)
        {
            String s="";
            s="T"+i+"    ";
            int a=(int)(Math.random()*10+1);
            for(int j=0;j<a;j++)
            {
               int c=(int)(Math.random()*10);
               s=s+"I"+c;
            }
            b.write(s);
            b.newLine();
        }
        b.close();
	}
	
	static void getData() throws Exception 
	{
		File f=new File("data1.txt");
        FileReader fr=new FileReader(f);
        BufferedReader br=new BufferedReader(fr);
        Map<Integer, List <Integer>> m = new HashMap<>();
        List<Integer> temp;
        String s;
        for(int i=0;i<10;i++)
        {
        	s=br.readLine();
        	for(int j=0;j<10;j++)
        	{
   			   int list_no=i;
        		 if(s.indexOf("I"+j)>=0)
                 {
        			 int object=j;
        			 temp = m.get(list_no);
        		      if(temp == null) {
        		        temp = new LinkedList<>();
        		      }
        		      temp.add(object);
        		      m.put(list_no, temp);
                 }
        	}
        	
        }
        
        Set<Integer> keyset = m.keySet();
        d = new int[keyset.size()][];
        Iterator<Integer> iterator = keyset.iterator();
        int count = 0;
        while(iterator.hasNext()) {
          temp = m.get(iterator.next());
          Integer[] int_arr = temp.toArray(new Integer[0]);
          d[count] = new int[int_arr.length];
          for(int i=0 ; i < d[count].length ; i++) {
            d[count][i] = int_arr[i].intValue();
          }
          count++;
        }
        
	}
}
